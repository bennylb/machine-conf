# -*- mode: sh; eval: (sh-set-shell "bash") -*-
#
# Shell agnostic configuration to be sourced from your shell rc.

# If not running interactively, don't do anything
case $- in
    *i*) ;;
    *) return;;
esac

. ~/.profile
. ~/.aliases

# # TMUX
# if which tmux >/dev/null 2>&1; then
#     case "$TERM" in
#         linux | eterm-color | xterm-kitty)
#           true
#           ;;
#         *)
#           test -z "$TMUX" && (tmux attach || tmux new-session)
#           ;;
#     esac
# fi

# Use gpg-agent as ssh-agent
if test -z `pidof gpg-agent`; then
    export GPG_TTY=$(tty)
    gpg-connect-agent updatestartuptty /bye >/dev/null

    unset SSH_AGENT_PID
    if [ -z "$SSH_AUTH_SOCK" ]; then
        export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
    fi
fi


# Functions
# Source https://github.com/direnv/direnv/wiki/Nix
nixify() {
    if [ ! -e ./.envrc ]; then
        cat > .envrc <<'EOF'
use_nix_gcrooted -c

# Set addtional variables below
#
# e.g
#
# Adds virtualenv bin to PATH
# PATH_add ./venv/bin
#
# Adds node_modules/.bin to PATH
# layout_node
#
# path_add VAR ./path/to/lib/or/bin
# e.g add libs to PYTHONPATH
# path_add PYTHONPATH ./path/to/some/lib
#
# For more information see: man direnv-stdlib
EOF
        # direnv allow
    fi
}

nixify_create() {
    # nixify

    if [ ! -e shell.nix ]; then
        cat > shell.nix <<'EOF'
{ pkgs ? import <nixpkgs> {} }:

pkgs.mkShell {
  # inputsFrom = [
  #
  # ];
  buildInputs = with pkgs; [
    bashInteractive
  ];
}
EOF
        ${EDITOR:-vim} shell.nix
    fi
}
